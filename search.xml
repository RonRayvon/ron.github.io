<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux 机器磁盘清理</title>
    <url>/ron.github.io/2024/11/01/Linux%E6%9C%BA%E5%99%A8%E7%A3%81%E7%9B%98%E6%B8%85%E7%90%86/</url>
    <content><![CDATA[<h2 id="Linux-机器磁盘清理"><a href="#Linux-机器磁盘清理" class="headerlink" title="Linux 机器磁盘清理"></a>Linux 机器磁盘清理</h2><p>早上收到一份告警，提醒磁盘空间内存占用超过 95%。</p>
<p>对于前端开发来说，前端大部分的服务是静态资源（React 、Vue 等开发的页面打包构建后产物 css\js\html 以及其他媒体资源和字体等静态资源）并不会占用过多的内存。</p>
<p>近期使用 strapi 搭建了一个基于node的服务，用于 lowcode 编排的内容的CRUD。本文记录如何清理磁盘。</p>
<p><img data-src="/ron.github.io/images/67e368da-3205-4fa2-84e9-5f852bc9e475.png" alt="image.png"></p>
<p>分为三步：查询磁盘占用情况、定位内存暴涨目录、清理内容</p>
<h2 id="查询磁盘"><a href="#查询磁盘" class="headerlink" title="查询磁盘"></a>查询磁盘</h2><p>命令  <code>df -h</code>     df【disk free】命令用于显示文件系统的磁盘空间使用情况，包括已用空间和可用空间。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h </span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">overlay          20G  19.6G  0    98% /</span><br><span class="line">tmpfs            64M     0   64M   0% /dev</span><br><span class="line">tmpfs           252G     0  252G   0% /sys/fs/cgroup</span><br><span class="line">/dev/md0p3      218G   14G  193G   7% /etc/hosts</span><br><span class="line">shm              64M     0   64M   0% /dev/shm</span><br><span class="line">/dev/md1        3.7T  2.1T  1.7T  56% /etc/hostname</span><br><span class="line">tmpfs           252G   12K  252G   1% /run/secrets/kubernetes.io/serviceaccount</span><br><span class="line">tmpfs           252G     0  252G   0% /proc/acpi</span><br><span class="line">tmpfs           252G     0  252G   0% /proc/scsi</span><br><span class="line">tmpfs           252G     0  252G   0% /sys/firmware</span><br></pre></td></tr></table></figure>

<p>磁盘针对 meta 数据预留的内存是 20G, 内存占用98%。从 overlay 文件系统占用比较大。从这一步定位到告警所在的机器的磁盘占用情况。下一步需要定位到对应的文件夹目录。</p>
<h2 id="定位到磁盘大内存文件目录"><a href="#定位到磁盘大内存文件目录" class="headerlink" title="定位到磁盘大内存文件目录"></a>定位到磁盘大内存文件目录</h2><p>命令  <code>du -sh * | sort -h</code>  ，命令含义：查询当前目录下一级目录的每个文件和子目录的大小，并按大小排序。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> -sh * | <span class="built_in">sort</span> -h</span><br></pre></td></tr></table></figure>

<p>查询结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0       sshd</span><br><span class="line">0       sysrd</span><br><span class="line">12K     logger</span><br><span class="line">12K     rd</span><br><span class="line">528M    odin</span><br><span class="line">19.6G    xiaoju</span><br></pre></td></tr></table></figure>

<p>定位是 xiaoju 目录，进入xiaoju文件夹继续查看内存分布。一步到位的命令是 <code>du -h -l</code> 将目录下的所有文件全列出来并标记出文件大小。–max-depth 控制文件目录深度。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> xiaoju <span class="comment"># 进入第一步分析出来的大内存占比文件夹下</span></span><br><span class="line"><span class="built_in">du</span> -h -l --max-depth=1  </span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">11M     ./opbin</span><br><span class="line">44K     ./meta</span><br><span class="line">861M    ./data1</span><br><span class="line">776M    ./strapi-lowcode-server</span><br><span class="line">44M     ./ep</span><br><span class="line">4.0K    ./statsd-client</span><br><span class="line">24M     ./.npm</span><br><span class="line">213M    ./node-v20.14.0-linux-x64</span><br><span class="line">2.1G    ./.cache</span><br><span class="line">43M     ./.config</span><br><span class="line">0       ./.yarn</span><br><span class="line">15.4G    ./.pm2</span><br><span class="line">788K    ./elvish</span><br><span class="line">230M    ./python3</span><br><span class="line">19.6G    .</span><br></pre></td></tr></table></figure>

<p>看到了大部分内存可清理的范围了 pm2 进程守护，进程日志等占用了15.6G内存，其他就是cache占用2G。定位到原因大概就是 pm2 未配置内存占用大小，看了一下进程日志都不太重要可以进行清理。</p>
<h2 id="清理大内存目录"><a href="#清理大内存目录" class="headerlink" title="清理大内存目录"></a>清理大内存目录</h2><p>如果是特殊程序运行导致的内存暴涨，则需要考虑将程序迁出，或是将程序运行产物及时同步掉将内存释放（这一步应该做成自动化）。</p>
<p>对于当前我遇到的场景，只需要将 pm2 进程日志占用的内存 flush 即可。步骤有两点：第一先将机器的 .pm2&#x2F; 下的内存释放掉；第二：修改部署程序脚本，将内存占用限制为5G。</p>
<p>手动清理日志：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pm2 flush <span class="comment"># 手动清理日志</span></span><br></pre></td></tr></table></figure>

<p> 增加 pm2-logrotate 自动管理日志大小，修改 max_memory_restart 配置项限制内存大小。</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>清理完成后重新查询磁盘占比：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> -h  -l --max-depth=1</span><br></pre></td></tr></table></figure>

<p>释放掉 10G的内存占用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">11M     ./opbin</span><br><span class="line">44K     ./meta</span><br><span class="line">861M    ./data1</span><br><span class="line">776M    ./strapi-lowcode-server</span><br><span class="line">44M     ./ep</span><br><span class="line">4.0K    ./statsd-client</span><br><span class="line">24M     ./.npm</span><br><span class="line">213M    ./node-v20.14.0-linux-x64</span><br><span class="line">2.1G    ./.cache</span><br><span class="line">43M     ./.config</span><br><span class="line">0       ./.yarn</span><br><span class="line">5.4G    ./.pm2</span><br><span class="line">788K    ./elvish</span><br><span class="line">230M    ./python3</span><br><span class="line">9.6G    .</span><br></pre></td></tr></table></figure>

<p>du -h -l 查看占用情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">overlay          20G  9.0G   12G  45% /</span><br><span class="line">tmpfs            64M     0   64M   0% /dev</span><br><span class="line">tmpfs           252G     0  252G   0% /sys/fs/cgroup</span><br><span class="line">/dev/md0p3      218G   14G  193G   7% /etc/hosts</span><br><span class="line">shm              64M     0   64M   0% /dev/shm</span><br><span class="line">/dev/md1        3.7T  2.1T  1.7T  56% /etc/hostname</span><br><span class="line">tmpfs           252G   12K  252G   1% /run/secrets/kubernetes.io/serviceaccount</span><br><span class="line">tmpfs           252G     0  252G   0% /proc/acpi</span><br><span class="line">tmpfs           252G     0  252G   0% /proc/scsi</span><br><span class="line">tmpfs           252G     0  252G   0% /sys/firmware</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PROGRAMMING</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>v8引擎系列之解释&amp;编译</title>
    <url>/ron.github.io/2024/11/14/v8%E5%BC%95%E6%93%8E%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BC%96%E8%AF%91%E5%92%8C%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<!-- # V8 引擎运行 JS代码 —  -->

<p>V8 引擎是 JS 运行引擎中的一种，在浏览器和node中比较常见。新开V8引擎系列文章，研究探索引擎背后的调用流程和设计思路。V8引擎系列文章主要参考V8引擎开源源码，辅助开源社区资料（部分资料已经过时）进行总结。如有总结错误之处，望不吝赐教，在此拜谢。</p>
<h2 id="前置-背景"><a href="#前置-背景" class="headerlink" title="前置-背景"></a>前置-背景</h2><h3 id="什么是-V8引擎"><a href="#什么是-V8引擎" class="headerlink" title="什么是 V8引擎"></a>什么是 V8引擎</h3><p>V8 是一个C++编写的程序，它用于编译执行JavaScript代码。提供以下基础能力：</p>
<div class="note info"><p>💡<br>1、编译并执行JS代码</p>
<p>2、以某种顺序执行函数，处理调用栈</p>
<p>3、管理对象的内存分配，堆内存</p>
<p>4、垃圾回收</p>
<p>5、提供所有 JS 语言支持的数据类型、运算符、API 和公共函数</p>
</div>

<p>V8 提供可选事件循环（浏览器中运行JS时，事件循环由浏览器提供）。V8 是一个单线程运行JS代码的多线程应用，V8引擎本身是多线程程序，V8采用单线程运行JS代码。</p>
<div class="note info no-icon"><p>💡<br>V8运行JS代码是是单线程。一个V8实例，运行一个单独的JS执行上下文。在浏览器或者 node.js 开发的进程中可以同时存在多个V8线程实例来实现多线程并发，比如：通过WebWorker等技术开辟新的执行JS上下文并调用V8线程执行。</p>
</div>

<p>V8 引擎内部多线程大体划分为几类：</p>
<div class="note info no-icon"><p>💡<br>1、主线程：负责执行 JS 代码解析、编译、运行。处理所有关于 JS 代码执行相关的任务，包括调用栈管理和事件循环。</p>
<p>2、垃圾回收线程：负责自动管理内存。</p>
<p>3、TurboFan 编译线程： V8 执行JS代码过程中会标记 hot 代码，TurboFan 线程会将 hot 代码编译优化，通常hot代码会被转换为机器码。</p>
<p>4、I&#x2F;O线程：node.js 环境中与 libuv 集成。负责文件系统操作，网络请求等等I&#x2F;O操作。</p>
<p>5、其他辅助线程：debug、性能分析等等</p>
</div>

<p>V8 引擎运行 JS 代码流程大体如下：</p>
<p><img data-src="/ron.github.io/images/v8/2411/image.png" alt="image.png"></p>
<p>V8 只负责执行 JS，部分运行环境需要调用宿主提供。</p>
<h3 id="Host-Env-运行环境"><a href="#Host-Env-运行环境" class="headerlink" title="Host Env 运行环境"></a>Host Env 运行环境</h3><p>V8的运行宿主环境有多种，最为常见的是浏览器 Browser 和 NodeJS 。Browser 环境和 NodeJS 环境有相同的成员如：ECMAScript standard （JavaScript核心内置API）、函数调用栈、Heap 内存、垃圾回收等等。不一致的在于特殊 API + 事件循环。</p>
<p>特殊点如下：</p>
<p>Browser 环境：</p>
<div class="note info no-icon"><p>💡<br><strong>Web API</strong>:  浏览器提供的接口，用于程序和浏览器交互 Canvas、ServiceWorker、WebStorage、Fetch、 Audio&#x2F;Video、Geolocation等等</p>
<p><strong>DOM API</strong>：文档对象模型，用于对 HTML 进行操作。主要包含以下方面 API 功能Element CRUD、Event Handing 事件监听处理、CSSOM 样式表修改 </p>
<p><strong>Event Loop</strong>: 浏览器单独提供的时间循环与渲染周期结合</p>
</div>

<p>NodeJS 环境：</p>
<div class="note info no-icon"><p>💡<br><strong>文件系统 API</strong>： fs 模块，解决 i&#x2F;o 读写</p>
<p><strong>网络 API</strong>：http、https、net等模块</p>
<p><strong>环境变量 proces</strong> ：环境变量维护</p>
<p><strong>Cluster集群和子线程</strong>：多线程并发API</p>
<p><strong>其他模块</strong>： C++ 模块 </p>
<p><strong>Event Loop</strong>：NodeJS 的 Event Loop采用了多阶段设计，允许更细粒度的控制</p>
</div>

<p><img data-src="/ron.github.io/images/v8/2411/image%201.png" alt="image.png"></p>
<p>事件驱动模型中唤起的回调，经过事件循环调用V8引擎执行。页面事件&#x2F;浏览器生命周期&#x2F;WebAPI 等等来源触发的回调函数，被添加到事件循环的任务队列中【这里也可称之为宏任务队列】。事件循环与微任务队列的关系在本文中不会深入，会单开一文。</p>
<p>以浏览器环境调用V8运行JS为例</p>
<p><img data-src="/ron.github.io/images/v8/2411/image%202.png" alt="image.png"></p>
<p>到此，正式进入 JS 代码如何在引擎中运行过程。第一步是：解释执行编译优化</p>
<h2 id="编译-运行"><a href="#编译-运行" class="headerlink" title="编译 &amp; 运行"></a>编译 &amp; 运行</h2><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>V8 引擎将JS代码编译转换成字节码和部分机器码。步骤如下：</p>
<div class="note info no-icon"><p>💡</p>
<ol>
<li>解析器将 JS Code 解析转换成 AST 并分析出关联的 Scopes 作用域， 构建AST 的过程称之为解析 Parse。</li>
<li>随后进行第一次编译 AST + Scopes 编译转换成字节码， 第一个编译器名字叫做 Ignition ，ignition 将 AST 转变成 bytecode 字节码。</li>
<li>解释执行字节码。字节码被解释器 inceptor 解释执行，解释执行过程中会进行代码优化标记，。</li>
<li>IC 优化。</li>
<li>Hot 代码三级优化，转成机器码。针对Hot代码，V8引擎目前采用三级优化模式。分别是：Sparkplug、Maglev、TurboFan 。三位大师负责将标记为 Hot 代码进一步编译成为机器码，以此提升代码运行速度。机器码被 CPU 直接运行。</li>
</ol>
</div>

<p><img data-src="/ron.github.io/images/v8/2411/image%203.png" alt="image.png"></p>
<p>到了这里会有两个疑问，为什么不全部编译成为机器码？第二什么情况下会进行优化，什么情况下会退出优化？</p>
<div class="note info no-icon"><p>💡</p>
<ul>
<li><strong>最快的启动运行和不太大的内存。</strong><ul>
<li>JIT 编译成为字节码能够节约时间，直接编译成机器码需要分析整个JS脚本推断所有对象类型和优化条件。Web 站点快速加载、响应流畅需要最快启动JS脚本执行。</li>
<li>大部分JS代码不会重复运行，运行初始编译成机器码耗时多且内存占用非常大。</li>
</ul>
</li>
<li><strong>JS 语言特性：动态类型不确定性</strong><ul>
<li>运行时频繁修改变量类型，未运行前无法推断准确的类型。</li>
<li>通过解释器 Ignition 运行字节码时，标记变量类型结构固定且频繁执行的 代码为 Hot，将Hot代编译成码机器码提升运行速率。</li>
</ul>
</li>
<li><strong>跨平台兼容性</strong><ul>
<li>bytecode 与平台无关，可以在不同的硬件架构上运行。机器码由 CPU 直接运行，与 CPU 架构以及支持的编码强相关。</li>
</ul>
</li>
</ul>
</div>

<h3 id="字节码-VS-机器码"><a href="#字节码-VS-机器码" class="headerlink" title="字节码 VS 机器码"></a>字节码 VS 机器码</h3><p>编译有两种常见的模式 JIT （just in time）即时编译和 AOT（Ahead of time）提前编译。JIT 是在代码运行期间动态编译，编译-运行-编译-运行。AOT 一般常见于C++ 和 JAVA 这类强类型语言，打包构建时直接产出字节码或机器码。V8 引擎编译JS代码采用的是 JIT编译模式。</p>
<p>V8 执行 JS 代码过程中先翻译成 bytecode， 多次运行会标记可被优化的代码标记为 Hot TuboFan 将 Hot 代码从 bytecode 编译成机器码，加速运行【CPU直接运行机器码】。</p>
<p><img data-src="/ron.github.io/images/v8/2411/image%204.png" alt="image.png"></p>
<p>V8 提供的字节码映射表：</p>
<p><a href="https://github.com/v8/v8/blob/master/src/interpreter/bytecodes.h">https://github.com/v8/v8/blob/master/src/interpreter/bytecodes.h</a></p>
<p>10k 的 JS 代码就全编译成机器码需要 20M 的空间，1M的JS代码则需要约 2G 的内存空间。</p>
<p>V8采用折中方案：解释执行大部分代码，对部分高频代码进行优化。</p>
<h2 id="V8-引擎运行优化"><a href="#V8-引擎运行优化" class="headerlink" title="V8 引擎运行优化"></a>V8 引擎运行优化</h2><p>V8 引擎优化 “<strong>在内存、CPU、等资源合适的情况下，优化调用频繁；类型结构稳定；执行时间长；代码规模适中；代码控制流程简单的代码</strong>” 提升运行效率。剔除死代码，死代码包括：不可达代码；无用计算；冗余的类型检查。</p>
<p>在分析优化逻辑之前，需要先介绍一下 feedback_vector 。JS 代码在V8引擎中运行过程中，所有的代码分析 &#x2F; 运行记录 等信息都是记录在 feedback_vector 上。</p>
<p><img data-src="/ron.github.io/images/v8/2411/image%205.png" alt="image.png"></p>
<p>在 <code>JS source → bytecode -&gt; intercept execute - … → Maglev … → TurboFan → MachineCode ..</code> 过程中代码的分析结果，运行中的返回值、稳定性、耗时等信息都存储在 feedback_vector 上.  </p>
<div class="note info no-icon"><p>💡<br>分类介绍 feedback_vector 存储的重要信息</p>
<p>1、代码编译分析信息：</p>
<p>2、运行时优化信息</p>
</div>

<p> V8 基于 各个环节提取的 feedback_vector 信息进行优化&#x2F;去优化分析。包括：死代码消除、IC 内联代码优化、Hot 标记优化。</p>
<p>标记优化的大流程如下：</p>
<p><img data-src="/ron.github.io/images/v8/2411/image%206.png" alt="image.png"></p>
<h3 id="死代码消除"><a href="#死代码消除" class="headerlink" title="死代码消除"></a><strong>死代码消除</strong></h3><p>V8 对代码进行标记，不可达的代码；无用计算的代码；冗余的类型检查等等代码会被标记为 isDead。这些代码不会被执行也不会被内联优化检查到！</p>
<h3 id="内联优化-【src-compiler-js-inlining-heuristic-cc】"><a href="#内联优化-【src-compiler-js-inlining-heuristic-cc】" class="headerlink" title="内联优化 【src&#x2F;compiler&#x2F;js-inlining-heuristic.cc】"></a><strong>内联优化 【src&#x2F;compiler&#x2F;js-inlining-heuristic.cc】</strong></h3><p>减少函数调用开销（调用栈切换）；减少局部变量访问次数来提升实现优化。函数体积小、调用频率高、参数类型稳定、没有复杂控制流。一句话，<strong>高频调用且可预测的小函数。</strong></p>
<p>内联优化的小 case</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原代码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calc</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">add</span>(x, y) * <span class="number">2</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内联优化后</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calc</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (x + y) * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内联优化标记策略：</p>
<div class="note info no-icon"><p>💡</p>
<ol>
<li>构造函数调用或者普通函数调用</li>
<li>存在直接递归调用的不优化</li>
<li>未达到最低调用频率不优化</li>
<li>强制内联小函数【27字节码以内，转换JS代码大概1-2行】注意：即使是小函数不符合前三条也不会优化！</li>
<li>考虑内存和性能预算，当内存预算到了瓶颈停止内联，内存占用超过预算甚至会将部分内联进行退化。小函数优势在此！</li>
</ol>
</div>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file: src/compiler/js-inlining-heuristic.cc</span></span><br><span class="line"><span class="function">Reduction <span class="title">JSInliningHeuristic::Reduce</span><span class="params">(Node* node)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 非构造函数调用或者普通函数调用 退出检查</span></span><br><span class="line">  <span class="keyword">if</span> (!IrOpcode::<span class="built_in">IsInlineeOpcode</span>(node-&gt;<span class="built_in">opcode</span>())) <span class="keyword">return</span> <span class="built_in">NoChange</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 累计内联大小超过上限--退出</span></span><br><span class="line">  <span class="keyword">if</span> (total_inlined_bytecode_size_ &gt;= max_inlined_bytecode_size_absolute_) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">NoChange</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...  </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; candidate.num_functions; ++i) &#123;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">	  <span class="comment">// 直接递归调用---不优化</span></span><br><span class="line">    <span class="keyword">if</span> (frame_info.<span class="built_in">shared_info</span>().<span class="built_in">ToHandle</span>(&amp;frame_shared_info) &amp;&amp;</span><br><span class="line">        frame_shared_info.<span class="built_in">equals</span>(shared.<span class="built_in">object</span>())) &#123;</span><br><span class="line">      <span class="built_in">TRACE</span>(<span class="string">&quot;Not considering call site #&quot;</span> &lt;&lt; node-&gt;<span class="built_in">id</span>() &lt;&lt; <span class="string">&quot;:&quot;</span></span><br><span class="line">                                          &lt;&lt; node-&gt;<span class="built_in">op</span>()-&gt;<span class="built_in">mnemonic</span>()</span><br><span class="line">                                          &lt;&lt; <span class="string">&quot;, because of recursive inlining&quot;</span>);</span><br><span class="line">      candidate.can_inline_function[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">	 <span class="comment">// 强制优化小函数</span></span><br><span class="line">    <span class="keyword">if</span> (candidate.can_inline_function[i]) &#123;</span><br><span class="line">      can_inline_candidate = <span class="literal">true</span>;</span><br><span class="line">      BytecodeArrayRef bytecode = candidate.bytecode[i].<span class="built_in">value</span>();</span><br><span class="line">      candidate.total_size += bytecode.<span class="built_in">length</span>();</span><br><span class="line">      <span class="type">unsigned</span> inlined_bytecode_size = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (OptionalJSFunctionRef function = candidate.functions[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (OptionalCodeRef code = function-&gt;<span class="built_in">code</span>(<span class="built_in">broker</span>())) &#123;</span><br><span class="line">          inlined_bytecode_size = code-&gt;<span class="built_in">GetInlinedBytecodeSize</span>();</span><br><span class="line">          candidate.total_size += inlined_bytecode_size;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      candidate_is_small = candidate_is_small &amp;&amp;</span><br><span class="line">                           <span class="built_in">IsSmall</span>(bytecode.<span class="built_in">length</span>() + inlined_bytecode_size);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!can_inline_candidate) <span class="keyword">return</span> <span class="built_in">NoChange</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 未达到最低调用频率不优化：min_inlining_frequency = 0.15</span></span><br><span class="line">  <span class="keyword">if</span> (candidate.frequency.<span class="built_in">IsKnown</span>() &amp;&amp;</span><br><span class="line">      candidate.frequency.<span class="built_in">value</span>() &lt; v8_flags.min_inlining_frequency) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">NoChange</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  seen_.<span class="built_in">insert</span>(node-&gt;<span class="built_in">id</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 小函数强制内联---</span></span><br><span class="line">  <span class="keyword">if</span> (candidate_is_small) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">InlineCandidate</span>(candidate, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// In the general case we remember the candidate for later.</span></span><br><span class="line">  candidates_.<span class="built_in">insert</span>(candidate);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">NoChange</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Returns true if opcode can be inlined.</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">IsInlineeOpcode</span><span class="params">(Value value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value == kJSConstruct || value == kJSCall;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note info no-icon"><p>💡<br>opcode 常见值如下：</p>
<ol>
<li><strong>kJSCall</strong>：表示一个普通的 JavaScript 函数调用。</li>
<li><strong>kJSConstruct</strong>：表示一个构造函数调用，通常是通过 <strong><code>new</code></strong> 关键字调用的函数。</li>
<li><strong>kJSReturn</strong>：表示返回语句，结束当前函数并返回值。</li>
<li><strong>kJSLoadProperty</strong>：表示加载对象的属性。</li>
<li><strong>kJSStoreProperty</strong>：表示将值存储到对象的属性中。</li>
<li><strong>kJSLoadElement</strong>：表示加载数组或类数组对象的元素。</li>
<li><strong>kJSStoreElement</strong>：表示将值存储到数组或类数组对象的元素中。</li>
<li><strong>kJSThrow</strong>：表示抛出异常。</li>
<li><strong>kJSBranch</strong>：表示条件分支或跳转。</li>
</ol>
</div>

<p>标记完成后，需要进行优化前检查，排序。到这里的基本都是非小函数【大概是函数体超过2行，小函数字节码限制27字节】。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file: src/compiler/js-inlining-heuristic.cc</span></span><br><span class="line"><span class="comment">// 排序策略</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">JSInliningHeuristic::Finalize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">  <span class="keyword">while</span> (!candidates_.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">    <span class="keyword">auto</span> i = candidates_.<span class="built_in">begin</span>();</span><br><span class="line">    Candidate candidate = *i;</span><br><span class="line">    candidates_.<span class="built_in">erase</span>(i);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已经优化了的--跳过</span></span><br><span class="line">    <span class="keyword">if</span> (!IrOpcode::<span class="built_in">IsInlineeOpcode</span>(candidate.node-&gt;<span class="built_in">opcode</span>())) <span class="keyword">continue</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 无效死代码，跳过</span></span><br><span class="line">    <span class="keyword">if</span> (candidate.node-&gt;<span class="built_in">IsDead</span>()) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 预算检查---</span></span><br><span class="line">    <span class="type">double</span> size_of_candidate =</span><br><span class="line">        candidate.total_size * v8_flags.reserve_inline_budget_scale_factor;</span><br><span class="line">    <span class="type">int</span> total_size =</span><br><span class="line">        total_inlined_bytecode_size_ + <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(size_of_candidate);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 超过内联预算上限---本次暂时不优化</span></span><br><span class="line">    <span class="keyword">if</span> (total_size &gt; max_inlined_bytecode_size_cumulative_) &#123;</span><br><span class="line">      info_-&gt;<span class="built_in">set_could_not_inline_all_candidates</span>();</span><br><span class="line">      <span class="comment">// Try if any smaller functions are available to inline.</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 恭喜！！进入下一环节~ </span></span><br><span class="line">    Reduction <span class="type">const</span> reduction = <span class="built_in">InlineCandidate</span>(candidate, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (reduction.<span class="built_in">Changed</span>()) <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析函数历史执行情况！从参数格式结构稳定性、运行结果稳定性、异常错误等方面进行评估，内容来自 feedback_vector。</p>
<ul>
<li>稳定性检查，出现过不稳定执行的函数中止优化！</li>
<li>函数内逐步进行内联优化！直到总内联优化占用达到上限！</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Reduction <span class="title">JSInliningHeuristic::InlineCandidate</span><span class="params">(Candidate <span class="type">const</span>&amp; candidate,</span></span></span><br><span class="line"><span class="params"><span class="function">                                               <span class="type">bool</span> small_function)</span> </span>&#123;</span><br><span class="line">   ...                                            </span><br><span class="line">  <span class="comment">// 检查调用是否稳定--参数检查！</span></span><br><span class="line">  Node* if_exception = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">if</span> (NodeProperties::<span class="built_in">IsExceptionalCall</span>(node, &amp;if_exception)) &#123;</span><br><span class="line">    Node* if_exceptions[kMaxCallPolymorphism + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查历史执行情况：运行稳定性、异常结果检查</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_calls; ++i) &#123;</span><br><span class="line">      if_successes[i] = <span class="built_in">graph</span>()-&gt;<span class="built_in">NewNode</span>(<span class="built_in">common</span>()-&gt;<span class="built_in">IfSuccess</span>(), calls[i]);</span><br><span class="line">      if_exceptions[i] =</span><br><span class="line">          <span class="built_in">graph</span>()-&gt;<span class="built_in">NewNode</span>(<span class="built_in">common</span>()-&gt;<span class="built_in">IfException</span>(), calls[i], calls[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Morph the &#123;if_exception&#125; projection into a join.</span></span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 稳定性检查通过后，逐步进行内联优化！直到总内联优化占用达到上限！</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_calls &amp;&amp; total_inlined_bytecode_size_ &lt;</span><br><span class="line">                                       max_inlined_bytecode_size_absolute_;</span><br><span class="line">       ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (candidate.can_inline_function[i] &amp;&amp;</span><br><span class="line">        (small_function || total_inlined_bytecode_size_ &lt;</span><br><span class="line">                               max_inlined_bytecode_size_cumulative_)) &#123;</span><br><span class="line">      Node* call = calls[i];</span><br><span class="line">      Reduction <span class="type">const</span> reduction = inliner_.<span class="built_in">ReduceJSCall</span>(call);</span><br><span class="line">      <span class="keyword">if</span> (reduction.<span class="built_in">Changed</span>()) &#123;</span><br><span class="line">        total_inlined_bytecode_size_ += candidate.bytecode[i]-&gt;<span class="built_in">length</span>();</span><br><span class="line">        call-&gt;<span class="built_in">Kill</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Replace</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>内联优化存在几个针对字节码大小的限制，</p>
<div class="note info no-icon"><p>💡</p>
<ul>
<li>小函数内联大小：27字节</li>
<li>单个内联最大字节码：460字节</li>
<li>累计内联上限：920字节</li>
</ul>
</div>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file : src/flags/flag-definitions.h</span></span><br><span class="line"><span class="built_in">DEFINE_INT</span>(max_inlined_bytecode_size, <span class="number">460</span>,</span><br><span class="line">           <span class="string">&quot;maximum size of bytecode for a single inlining&quot;</span>)</span><br><span class="line"><span class="built_in">DEFINE_INT</span>(max_inlined_bytecode_size_cumulative, <span class="number">920</span>,</span><br><span class="line">           <span class="string">&quot;maximum cumulative size of bytecode considered for inlining&quot;</span>)</span><br><span class="line"><span class="built_in">DEFINE_INT</span>(max_inlined_bytecode_size_absolute, <span class="number">4600</span>,</span><br><span class="line">           <span class="string">&quot;maximum absolute size of bytecode considered for inlining&quot;</span>)</span><br><span class="line"><span class="built_in">DEFINE_FLOAT</span>(</span><br><span class="line">    reserve_inline_budget_scale_factor, <span class="number">1.2</span>,</span><br><span class="line">    <span class="string">&quot;scale factor of bytecode size used to calculate the inlining budget&quot;</span>)</span><br><span class="line"><span class="built_in">DEFINE_INT</span>(max_inlined_bytecode_size_small, <span class="number">27</span>,</span><br><span class="line">           <span class="string">&quot;maximum size of bytecode considered for small function inlining&quot;</span>)</span><br><span class="line"><span class="built_in">DEFINE_INT</span>(max_optimized_bytecode_size, <span class="number">60</span> * KB,</span><br><span class="line">           <span class="string">&quot;maximum bytecode size to &quot;</span></span><br><span class="line">           <span class="string">&quot;be considered for turbofan optimization; too high values may cause &quot;</span></span><br><span class="line">           <span class="string">&quot;the compiler to hit (release) assertions&quot;</span>)</span><br><span class="line"><span class="built_in">DEFINE_FLOAT</span>(min_inlining_frequency, <span class="number">0.15</span>, <span class="string">&quot;minimum frequency for inlining&quot;</span>)</span><br><span class="line"><span class="built_in">DEFINE_BOOL</span>(polymorphic_inlining, <span class="literal">true</span>, <span class="string">&quot;polymorphic inlining&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>其他不会被优化的场景：</p>
<div class="note info no-icon"><p>💡</p>
<ul>
<li>动态的 eval</li>
<li>with 语句</li>
<li>复杂的 try catch</li>
<li>单个函数编译为字节码内存超过 460 字节</li>
<li>调用评率低：ignition 为 0.15 [单位没看懂]</li>
<li>动态 import</li>
<li>非纯函数，存在不可预测的过程</li>
</ul>
</div>

<p>内联优化是通过对解释执行的字节码进行执行过程中分析转换的，<strong>内联优化后产物还是字节码，Hot 代码中内联优化的代码则会一同编译成机器码</strong>。Hot 代码编译机器码部分，不再追溯关于内联优化相关内容。</p>
<h3 id="Hot-代码优化"><a href="#Hot-代码优化" class="headerlink" title="Hot 代码优化"></a>Hot 代码优化</h3><p>V8 代码在字节码解释执行阶段会附带标记Hot代码（附带信息存于feedback_vector），通过将 Hot 代码从字节码编译成机器码。机器码由CPU直接运行效率远远大于ignition解释器运行字节码。</p>
<p>V8 引擎采用多级优化策略（平衡编译耗时和机器码优化深度），截止24年11月，V8发布源码中采用的是三级编译器。 Maglev 编译器第一版本发布是在 chrome 117 。</p>
<p>先介绍一下Hot代码涉及的优化编译器：</p>
<p><img data-src="/ron.github.io/images/v8/2411/image%207.png" alt="image.png"></p>
<p>三级优化模型，V8目的是平衡编译成本和运行速度。编译成本：编译时间 + 内存占用。编译速度Sparkplug最快。以下是编译的速度：</p>
<p><img data-src="/ron.github.io/images/v8/2411/image%208.png" alt="image.png"></p>
<p>V8 引擎解释器+编译器优化历史组合跑分情况：</p>
<p><img data-src="/ron.github.io/images/v8/2411/image%209.png" alt="image.png"></p>
<div class="note info no-icon"><p>💡</p>
<h3 id="1-Ignition（解释器）"><a href="#1-Ignition（解释器）" class="headerlink" title="1. Ignition（解释器）"></a>1. <strong>Ignition</strong>（解释器）</h3><ul>
<li><strong>阶段</strong>：Ignition 是 V8 的字节码解释器，它是 JavaScript 执行的第一个阶段。</li>
<li><strong>功能</strong>：将 JavaScript 源代码编译为字节码，并逐条解释执行。这种解释执行通常适合初始化阶段或短期、低频执行的代码。</li>
<li><strong>调用条件</strong>：代码首次加载时，Ignition 会将源代码转为字节码，然后解释执行。</li>
<li><strong>优点</strong>：解释器生成字节码的速度较快、内存开销小，但由于每次都需要解释，性能会比编译的机器码稍慢。</li>
</ul>
<h3 id="2-Sparkplug（基线编译器）"><a href="#2-Sparkplug（基线编译器）" class="headerlink" title="2. Sparkplug（基线编译器）"></a>2. <strong>Sparkplug</strong>（基线编译器）</h3><ul>
<li><strong>阶段</strong>：在 Ignition 之后，作为快速编译阶段执行。</li>
<li><strong>功能</strong>：Sparkplug 是 V8 的基线编译器，负责将字节码快速编译为机器码，来提高代码执行速度。相比解释执行，编译后的代码运行更快，但 Sparkplug 并不会进行复杂优化，因此编译时间也非常短。</li>
<li><strong>调用条件</strong>：当代码被标记为“热”代码; 不存在 feedback_vector;</li>
<li><strong>优点</strong>：快速生成机器码，提升代码性能的同时仍保持较低内存消耗。</li>
</ul>
<h3 id="3-Maglev（中层编译器）"><a href="#3-Maglev（中层编译器）" class="headerlink" title="3. Maglev（中层编译器）"></a>3. <strong>Maglev</strong>（中层编译器）</h3><ul>
<li><strong>阶段</strong>：位于 Sparkplug 和 TurboFan 之间。</li>
<li><strong>功能</strong>：Maglev 是一种中层即时编译器，用于在代码“热度”增加但尚未进入深度优化阶段时提供进一步的优化。Maglev 生成的机器码质量高于 Sparkplug，但没有 TurboFan 的复杂优化。</li>
<li><strong>调用条件</strong>：Sparkplug 优化代码执行优化后，代码类型允许升级到 Maglev；之前没有Maglev 编译失败记录；未启动PGO(Profile Guided Optimization),启动PGO的直奔TurboFan；</li>
<li><strong>优点</strong>：提供更高质量的机器码，在提高性能的同时避免过多调用 TurboFan。</li>
</ul>
<h3 id="4-TurboFan（优化编译器）"><a href="#4-TurboFan（优化编译器）" class="headerlink" title="4. TurboFan（优化编译器）"></a>4. <strong>TurboFan</strong>（优化编译器）</h3><ul>
<li><strong>阶段</strong>：在代码被频繁调用后，为性能的最后提升执行。</li>
<li><strong>功能</strong>：TurboFan 是 V8 的优化编译器，对代码进行深度优化，生成高度优化的机器码。它适合执行频率非常高、长时间运行的“热”代码。</li>
<li><strong>调用条件</strong>：代码执行频率极高时触发，特别是在 Maglev 生成的代码仍不够高效的情况下，才会进入 TurboFan 的深度优化阶段。</li>
<li><strong>优点</strong>：TurboFan 会观察代码的执行模式，通过内联缓存和隐藏类等信息，对代码进行进一步优化，使其达到最佳性能。</li>
</ul>
</div>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file: src/execution/tiering-manager.cc</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TieringManager::OnInterruptTick</span><span class="params">(DirectHandle&lt;JSFunction&gt; function,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     CodeKind code_kind)</span> </span>&#123;</span><br><span class="line">	... </span><br><span class="line">  <span class="comment">// 第一步：先检查是否可使用 Sparkplug 优化：【函数没有feedback_vector】</span></span><br><span class="line">  <span class="type">const</span> <span class="type">bool</span> compile_sparkplug =</span><br><span class="line">      <span class="built_in">CanCompileWithBaseline</span>(isolate_, function-&gt;<span class="built_in">shared</span>()) &amp;&amp;</span><br><span class="line">      function-&gt;<span class="built_in">ActiveTierIsIgnition</span>(isolate_) &amp;&amp; !maybe_had_optimized_osr_code;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (compile_sparkplug) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> V8_ENABLE_SPARKPLUG</span></span><br><span class="line">    <span class="comment">// sparkpug 入口。。。</span></span><br><span class="line">    <span class="keyword">if</span> (v8_flags.baseline_batch_compilation) &#123;</span><br><span class="line">      isolate_-&gt;<span class="built_in">baseline_batch_compiler</span>()-&gt;<span class="built_in">EnqueueFunction</span>(function);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">  <span class="keyword">if</span> (first_time_tiered_up_to_sparkplug) &#123;</span><br><span class="line">    <span class="keyword">if</span> (had_feedback_vector) &#123;</span><br><span class="line">      <span class="keyword">if</span> (function-&gt;<span class="built_in">shared</span>()-&gt;<span class="built_in">cached_tiering_decision</span>() ==</span><br><span class="line">          CachedTieringDecision::kPending) &#123;</span><br><span class="line">        function-&gt;<span class="built_in">shared</span>()-&gt;<span class="built_in">set_cached_tiering_decision</span>(</span><br><span class="line">            CachedTieringDecision::kEarlySparkplug);</span><br><span class="line">      &#125;</span><br><span class="line">      function-&gt;<span class="built_in">SetInterruptBudget</span>(isolate_);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Sparkplug 优化后升级的场景：Maglev、turboFan</span></span><br><span class="line">  <span class="built_in">MaybeOptimizeFrame</span>(function_obj, code_kind);</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TieringManager::MaybeOptimizeFrame</span><span class="params">(Tagged&lt;JSFunction&gt; function,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        CodeKind current_code_kind)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">... </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">V8_UNLIKELY</span>(v8_flags.always_osr)) &#123;</span><br><span class="line">    <span class="built_in">TryRequestOsrAtNextOpportunity</span>(isolate_, function);</span><br><span class="line">    <span class="comment">// Continue below and do a normal optimized compile as well.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="type">bool</span> maglev_osr = maglev::<span class="built_in">IsMaglevOsrEnabled</span>();</span><br><span class="line">  <span class="type">const</span> CodeKinds available_kinds = function-&gt;<span class="built_in">GetAvailableCodeKinds</span>(isolate_);</span><br><span class="line">  </span><br><span class="line">  <span class="type">const</span> <span class="type">bool</span> waiting_for_tierup =</span><br><span class="line">      (current_code_kind &lt; CodeKind::TURBOFAN_JS &amp;&amp;</span><br><span class="line">       (available_kinds &amp; CodeKindFlag::TURBOFAN_JS)) ||</span><br><span class="line">      (maglev_osr &amp;&amp; current_code_kind &lt; CodeKind::MAGLEV &amp;&amp;</span><br><span class="line">       (available_kinds &amp; CodeKindFlag::MAGLEV));</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (function-&gt;<span class="built_in">IsOptimizationRequested</span>(isolate_) || waiting_for_tierup) &#123;</span><br><span class="line">    <span class="comment">// 节能模式或电池节省模式 --- 不优化</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">V8_UNLIKELY</span>(maglev_osr &amp;&amp; current_code_kind == CodeKind::MAGLEV &amp;&amp;</span><br><span class="line">                    (!v8_flags.osr_from_maglev ||</span><br><span class="line">                     isolate_-&gt;<span class="built_in">EfficiencyModeEnabledForTiering</span>() ||</span><br><span class="line">                     isolate_-&gt;<span class="built_in">BatterySaverModeEnabled</span>()))) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// OSR kicks in only once we&#x27;ve previously decided to tier up, but we are</span></span><br><span class="line">    <span class="comment">// still in a lower-tier frame (this implies a long-running loop).</span></span><br><span class="line">    <span class="comment">// 需要优化：但是优先级不够的，提供优化：大循环</span></span><br><span class="line">    <span class="built_in">TryIncrementOsrUrgency</span>(isolate_, function);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  OptimizationDecision d =</span><br><span class="line">      <span class="built_in">ShouldOptimize</span>(function-&gt;<span class="built_in">feedback_vector</span>(), current_code_kind);</span><br><span class="line">      </span><br><span class="line">  <span class="comment">// We might be stuck in a baseline frame that wants to tier up to Maglev, but</span></span><br><span class="line">  <span class="comment">// is in a loop, and can&#x27;t OSR, because Maglev doesn&#x27;t have OSR. Allow it to</span></span><br><span class="line">  <span class="comment">// skip over Maglev by re-checking ShouldOptimize as if we were in Maglev.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">V8_UNLIKELY</span>(!isolate_-&gt;<span class="built_in">EfficiencyModeEnabledForTiering</span>() &amp;&amp; !maglev_osr &amp;&amp;</span><br><span class="line">                  d.<span class="built_in">should_optimize</span>() &amp;&amp; d.code_kind == CodeKind::MAGLEV)) &#123;</span><br><span class="line">    <span class="type">bool</span> is_marked_for_maglev_optimization =</span><br><span class="line">        existing_request == CodeKind::MAGLEV ||</span><br><span class="line">        (available_kinds &amp; CodeKindFlag::MAGLEV);</span><br><span class="line">    <span class="comment">// 优化第二级：Maglev 优化检查进入</span></span><br><span class="line">    <span class="keyword">if</span> (is_marked_for_maglev_optimization) &#123;</span><br><span class="line">      d = <span class="built_in">ShouldOptimize</span>(function-&gt;<span class="built_in">feedback_vector</span>(), CodeKind::MAGLEV);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 进入终极优化： turboFan</span></span><br><span class="line">  <span class="keyword">if</span> (d.<span class="built_in">should_optimize</span>()) <span class="built_in">Optimize</span>(function, d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function">OptimizationDecision <span class="title">TieringManager::ShouldOptimize</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    Tagged&lt;FeedbackVector&gt; feedback_vector, CodeKind current_code_kind)</span> </span>&#123;</span><br><span class="line">  Tagged&lt;SharedFunctionInfo&gt; shared = feedback_vector-&gt;<span class="built_in">shared_function_info</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 已经优化过的代码，不处理</span></span><br><span class="line">  <span class="keyword">if</span> (current_code_kind == CodeKind::TURBOFAN_JS) &#123;</span><br><span class="line">    <span class="keyword">return</span> OptimizationDecision::<span class="built_in">DoNotOptimize</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">TiersUpToMaglev</span>(current_code_kind) &amp;&amp;</span><br><span class="line">      shared-&gt;<span class="built_in">PassesFilter</span>(v8_flags.maglev_filter) &amp;&amp;</span><br><span class="line">      !shared-&gt;<span class="built_in">maglev_compilation_failed</span>()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (v8_flags.profile_guided_optimization &amp;&amp;</span><br><span class="line">        shared-&gt;<span class="built_in">cached_tiering_decision</span>() ==</span><br><span class="line">            CachedTieringDecision::kEarlyTurbofan) &#123;</span><br><span class="line">      <span class="comment">// 进入TurboFan 优化</span></span><br><span class="line">      <span class="keyword">return</span> OptimizationDecision::<span class="built_in">TurbofanHotAndStable</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Maglev 优化</span></span><br><span class="line">    <span class="keyword">return</span> OptimizationDecision::<span class="built_in">Maglev</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">V8_UNLIKELY</span>(!v8_flags.turbofan ||</span><br><span class="line">                  !shared-&gt;<span class="built_in">PassesFilter</span>(v8_flags.turbo_filter) ||</span><br><span class="line">                  (v8_flags.efficiency_mode_disable_turbofan &amp;&amp;</span><br><span class="line">                   isolate_-&gt;<span class="built_in">EfficiencyModeEnabledForTiering</span>()) ||</span><br><span class="line">                  isolate_-&gt;<span class="built_in">BatterySaverModeEnabled</span>())) &#123;</span><br><span class="line">    <span class="keyword">return</span> OptimizationDecision::<span class="built_in">DoNotOptimize</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// invocation_count 函数的调用次数！！efficiency_mode_delay_turbofan 初始值15000</span></span><br><span class="line">  <span class="keyword">if</span> (isolate_-&gt;<span class="built_in">EfficiencyModeEnabledForTiering</span>() &amp;&amp;</span><br><span class="line">      v8_flags.efficiency_mode_delay_turbofan &amp;&amp;</span><br><span class="line">      feedback_vector-&gt;<span class="built_in">invocation_count</span>() &lt;</span><br><span class="line">          v8_flags.efficiency_mode_delay_turbofan) &#123;</span><br><span class="line">    <span class="keyword">return</span> OptimizationDecision::<span class="built_in">DoNotOptimize</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 优化的字节码超过上限：不优化 max_optimized_bytecode_size 初始值60KB</span></span><br><span class="line">  Tagged&lt;BytecodeArray&gt; bytecode = shared-&gt;<span class="built_in">GetBytecodeArray</span>(isolate_);</span><br><span class="line">  <span class="keyword">if</span> (bytecode-&gt;<span class="built_in">length</span>() &gt; v8_flags.max_optimized_bytecode_size) &#123;</span><br><span class="line">    <span class="keyword">return</span> OptimizationDecision::<span class="built_in">DoNotOptimize</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 进入 TurboFan 优化 </span></span><br><span class="line">	<span class="keyword">return</span> OptimizationDecision::<span class="built_in">TurbofanHotAndStable</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就是Hot代码分层优化的内容，什么时候去优化呢？当内存资源出现压力后、函数变冷（调用不再频繁）等情况优化会被去掉，退回字节码解释执行。</p>
<h2 id="如何写好代码？"><a href="#如何写好代码？" class="headerlink" title="如何写好代码？"></a>如何写好代码？</h2><p>思考题~</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><div class="note info no-icon"><p>💡</p>
<ul>
<li><a href="https://v8.dev/blog/maglev">Maglev - V8最快的JIT优化</a>  <a href="https://v8.dev/blog/maglev">https://v8.dev/blog/maglev</a></li>
<li><a href="https://cabulous.medium.com/how-v8-javascript-engine-works-5393832d80a7">how-v8-javascript-engine-works</a> <a href="https://cabulous.medium.com/how-v8-javascript-engine-works-5393832d80a7">https://cabulous.medium.com/how-v8-javascript-engine-works-5393832d80a7</a></li>
<li><a href="https://www.youtube.com/watch?v=p-iiEDtpy6I">Franziska Hinkelmann: JavaScript engines - how do they even? | JSConf EU</a> <a href="https://www.youtube.com/watch?v=p-iiEDtpy6I">https://www.youtube.com/watch?v=p-iiEDtpy6I</a></li>
<li>V8 <a href="https://github.com/v8/v8">github.com&#x2F;v8</a></li>
</ul>
</div>]]></content>
      <tags>
        <tag>V8</tag>
      </tags>
  </entry>
  <entry>
    <title>为异步操作对象提供可取消操作</title>
    <url>/ron.github.io/2024/10/29/%E4%B8%BA%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E6%8F%90%E4%BE%9B%E5%8F%AF%E5%8F%96%E6%B6%88%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="异步操作对象应该提供可取消操作"><a href="#异步操作对象应该提供可取消操作" class="headerlink" title="异步操作对象应该提供可取消操作"></a>异步操作对象应该提供可取消操作</h2><p>对于异步操作如：异步计算、网络请求、定时器等操作。在条件变更以后，需要将上一次变更触发的异步操作中断抛弃、重新触发新的异步操作。未取消失效的异步操作可能导致几个问题：</p>
<ul>
<li>数据请求&#x2F;参数变更，数据被错误覆盖。第二个请求返回后，上一次请求迟迟返回将数据覆盖为旧数据。</li>
<li>未取消的异步操作，引发后续监听的处理函数执行。Promise 监听的 resolve。当然 reject 中也应该考虑到Promise 操作被取消异常。</li>
</ul>
<h2 id="AbortController-与-AbortSignal-API"><a href="#AbortController-与-AbortSignal-API" class="headerlink" title="AbortController 与 AbortSignal API"></a>AbortController 与 AbortSignal API</h2><p>AbortController 用于控制 AbortSignal ，AbortSignal 是可取消的信号对象。<br>AbortSignal 对象不可以直接实例化，但提供了两个静态API方法返回 AbortSignal 实例【AbortSignal.abort() 返回一个终止的的AbortSignal 实例； AbortSignal.timeout(tims) 返回一个自动终止的AbortSignal 实例; 】。 AbortController 内部在构造函数中实例化一个 AbortSignal 对象, 并支持 abort 函数api控制是否终止。</p>
<p>取消fetch请求封装<br>当连续触发请求，参数变更等原因下。将上一次的过期请求取消掉（查询参数已经变更，只等待最新的请求）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HasSignalFetch</span> &#123;</span><br><span class="line">    private <span class="attr">signal</span>: <span class="title class_">AbortController</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">signal</span> = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fetch</span>(<span class="params">input: RequestInfo | URL, init: RequestInit | <span class="literal">undefined</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">signal</span> = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fetch</span>(input, &#123;</span><br><span class="line">            ...(init || &#123;&#125;),</span><br><span class="line">            <span class="attr">signal</span>: <span class="variable language_">this</span>.<span class="property">signal</span>.<span class="property">signal</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">abort</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">signal</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">signal</span>.<span class="title function_">abort</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UI 中使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [sendRe, setSendRe] = useState&lt;<span class="title class_">HasSignalFetch</span> | <span class="literal">undefined</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSendHtpp</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 取消上次请求</span></span><br><span class="line">    <span class="keyword">if</span> (sendRe) &#123;</span><br><span class="line">      sendRe.<span class="title function_">abort</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成新的请求并发送</span></span><br><span class="line">    <span class="keyword">const</span> sendIns = <span class="keyword">new</span> <span class="title class_">HasSignalFetch</span>();</span><br><span class="line">    <span class="title function_">setSendRe</span>(sendIns);</span><br><span class="line"></span><br><span class="line">    sendIns</span><br><span class="line">      .<span class="title function_">fetch</span>(<span class="string">&quot;https://8q47rs.csb.app&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="string">&quot;请求成功！！&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">warn</span>(err, <span class="string">&quot;请求错误!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleSendHtpp&#125;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="超时场景"><a href="#超时场景" class="headerlink" title="超时场景"></a>超时场景</h3><p>接口超时设定一般都来自 axios 等封装库，这里使用 AbortSignal.timeout 快速实现一个超时取消请求功能。另一种方式是使用 setTimeout 定时器，在定时器回调中AbortController 实例的abort函数手动中止。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 超时时间 10s ，超过10s 自动取消</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;&lt;https://xxx.com&gt;&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">signal</span>: <span class="title class_">AbortSignal</span>.<span class="title function_">timeout</span>(<span class="number">1000</span>*<span class="number">10</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>使用定时器回调中取消:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 超时取消</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    controller.<span class="title function_">abort</span>();</span><br><span class="line">  &#125;&#125;, <span class="number">10</span>*<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;&lt;https://xxx.com&gt;&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">signal</span>: controller.<span class="property">signal</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>AbortSignal.timeout(tims) 返回的信号对象实例计算时间从调用开始计时，并不是 fetch 或异步开始时计时。参考如下代码使用误区：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 倒计时 10s 从timeout函数调用开始计算</span></span><br><span class="line">  <span class="keyword">const</span> signal = <span class="title class_">AbortSignal</span>.<span class="title function_">timeout</span>(<span class="number">8</span>*<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 请求永远超时</span></span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;&lt;https://xxx.com&gt;&#x27;</span>, &#123;</span><br><span class="line">      signal</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, <span class="number">10</span>*<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>复合场景: 超时自动中止和其他条件自定义中止<br>接口如果超过10s还未请求回来中止掉，参数变更请求取消。两个条件均需要取消异步或者请求时，AbortSignal.timeout 就不适用了，只能使用 AbortController 实例 + setTimeout 定时器进行实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HasSignalFetch</span> &#123;</span><br><span class="line">    private <span class="attr">signal</span>: <span class="title class_">AbortController</span>;</span><br><span class="line">    private <span class="attr">timeout</span>: number;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">timeout?: number</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">signal</span> = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">timeout</span> = timeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 超时自动中止</span></span><br><span class="line">    private <span class="title function_">timeoutAutoAbort</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">timeout</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">signal</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">signal</span>.<span class="property">signal</span>.<span class="property">aborted</span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">signal</span>.<span class="title function_">abort</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="variable language_">this</span>.<span class="property">timeout</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fetch</span>(<span class="params">input: RequestInfo | URL, init: RequestInit | <span class="literal">undefined</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">signal</span> = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">timeoutAutoAbort</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fetch</span>(input, &#123;</span><br><span class="line">            ...(init || &#123;&#125;),</span><br><span class="line">            <span class="attr">signal</span>: <span class="variable language_">this</span>.<span class="property">signal</span>.<span class="property">signal</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">abort</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">signal</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">signal</span>.<span class="title function_">abort</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// use case</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> sendIns = <span class="keyword">new</span> <span class="title class_">HasSignalFetch</span>(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">        sendIns.<span class="title function_">fetch</span>(<span class="string">&#x27;https://xxx.com/a&#x27;</span>, &#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span> &#125;),</span><br><span class="line">        sendIns.<span class="title function_">fetch</span>(<span class="string">&#x27;https://xxx.com/b&#x27;</span>, &#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span> &#125;)</span><br><span class="line">    ]).<span class="title function_">then</span>(<span class="function">(<span class="params">resArr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resArr 处理得到的数据</span></span><br><span class="line">    &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 处理失败的场景，包含超时被终止，手动中止，请求错误等等！</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>模块封装过程中涉及到异步&#x2F;尤其是包含网络请求等场景，都应该提供中止异步，超时中止等基础能力。模块复用和健壮程序需要更多考虑到特殊场景（取消过期请求；中止超时的计算等等）。</p>
]]></content>
      <categories>
        <category>PROGRAMMING</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>再重头收拾旧河山</title>
    <url>/ron.github.io/2024/11/18/%E5%86%8D%E9%87%8D%E5%A4%B4%E6%94%B6%E6%8B%BE%E6%97%A7%E6%B2%B3%E5%B1%B1/</url>
    <content><![CDATA[<p>这是一篇关于挣扎在泥潭之中的猴子，思考解救自己的碎片。矛盾，拧巴，找到一些方式解救自己，疏于管理和执行力缺乏猴子又重新回到了拧巴，矛盾，这个轮回之中。<br>我需要挣钱用以换去生活所需，又想做自己喜欢的事情。在两者之间找到一条路径–编程。想要靠编程过的更好，在我看来就有非常可行的两条路径。其一：跳槽换个公司涨薪，短期可实现30%工资的涨幅。其二：开发一款个人产品，缓慢挣钱。在我看来两种方式各有优势，并且我都浅尝即止，这是个不好的征兆。我曾匆匆准备面试了两家岗位，失败告终；我的两款产品在启动开发后功能达到30%时突然暂停开发，执行力低是一个非常要命的缺点。我发现了~ 我的很多不成事的缺点，一点点改正，再重头收拾旧河山。</p>
<h2 id="做成之前，不要谈论"><a href="#做成之前，不要谈论" class="headerlink" title="做成之前，不要谈论"></a>做成之前，不要谈论</h2><p>做好决定快速验证并启动。一旦启动只有两个结果，开发完成大功告成，开发完成不及预期。前提一定是 <strong>开发完成</strong>. 按照计划，完完整整的搞定一件事情，这是执行力max。<br>另外一点，做成之前不要和别人谈论它。我的两个产品在设计阶段，已经开始和同事、家人分享，我们谈论其中的可行性，谈论一旦成功会有哪些好处。可是！可是！事情还没做成！！！<br>认真做决定，最好是独处时经过认真思考分析（从当前能看到的各个方面，可行性、成本、预估收益和竞争等等）。一旦下定决心，立即行动。以最大投入推动项目进展，不给自己设置限制（预计1个月开发完成），但是很可能三天就能搞定，我经常给自己设置期限，这是我拖延的原因之一。</p>
<h2 id="享受独处"><a href="#享受独处" class="headerlink" title="享受独处"></a>享受独处</h2><p>个人独处时，我更能反思自己做的决定，说过的话。哪些是对的？哪些是愚蠢的？思考看见别人做的事情，逻辑是什么？有哪些可以借鉴参考。和别人相处，需要实时响应，回应别人的话题，抖个机灵开心一下，回答又要避免说错话，这些由头都给性能不算好的CPU造成麻烦。</p>
<p>因此，我需要多制造独处时间。我和夫人养了一只猫。名字叫做“李逵”，是一个胆子很小又粘人的男孩。家里有夫人和猫，在家里是没法做到独处的，因此我的独处是篮球场和公司。在家里享受陪伴，但是控制时间。</p>
<h2 id="少说少错，减少抱怨"><a href="#少说少错，减少抱怨" class="headerlink" title="少说少错，减少抱怨"></a>少说少错，减少抱怨</h2><p>我还有一份工作，我有一个毛病，对于垃圾代码容忍度非常低。在别人旧代码上做更新时，尤其是写的不合理的代码，我习惯性的嘀咕 “写的什么玩意儿？”。 甚至会给身边同事吐槽，这个代码实现的真是惨不忍睹，来你看看这里写的硬编码，这里又重复实现一遍同样的逻辑，这里写的会触发没必要的计算和更新…。我想我的同事们，因该很反感这种行为吧。是垃圾代码，你重构不就完了吗？每天都在吐槽个啥呢？</p>
<p>是的，这个毛病已经在纠正了。减少负面情绪流出，我的方法是写到博客&#x2F;树洞笔记里面去，嘴上不说出来。</p>
<h2 id="篮球和编程"><a href="#篮球和编程" class="headerlink" title="篮球和编程"></a>篮球和编程</h2><p>坚持健身运动大概有三年的时间，疫情原因中断一段时间。22年底当我重新回到健身房，我开始练习游泳；足球；篮球；羽毛球，我是真的参与了。每个项目都是浅尝即止。游泳只会蛙泳，足球练习了一段时间，羽毛球也是如此。没有把一个运动真真的练好。24年10月，我开始意识到我应该认真的训练篮球，其他兴趣暂停。成为某一项运动的专业爱好者，而不是能力非常普通的爱好者。</p>
<p>开启了篮球专项训练，我开始拆解专项：纠正投篮、练习运球过人…突破、脚步…、跑位和防守等等。训练并不无聊，很多动作自己意识不到，实际是错误的，通过手机在边上录制视频，回看就能发现这个问题，纠正动作再重复练习，查看教程视频。现在投篮动作标准了不少，但是发力仍然不流畅（一段式）。<br>因此我发现：行动 -&gt; 反馈 -&gt; 修正 -&gt; 行动 ~ 这是一个正向循环公式。发现错误&#x2F;负面反馈并不是失败，他只是一个反馈 feedback 。篮球训练我可以通过视频录制的方式来发现问题，编程工作中的反馈搭建就要困难的多。大部分时候我潜意识里面也忽略了这部分反馈！</p>
<p>如果有一个人经常指出我的问题，我应该要感谢他。但是碍于各种情面，往往都很难得到这种反馈。</p>
<p>再重头收拾旧河山，这一句非常有气势~ 用来结束这篇碎碎念。重新恢复了 6.40 早起，重新戒断短视频和社交app，精力重新回到编程和篮球上去。</p>
]]></content>
      <tags>
        <tag>闲言碎语</tag>
      </tags>
  </entry>
</search>
